apiVersion: v1
kind: Secret
metadata:
  name: hangar-backend
  labels:
    {{- include "hangar.labels" . | nindent 4 }}
type: Opaque
stringData:
  application.yaml: |
    spring:
      application:
        name: hangar-backend
      datasource:
        url: "jdbc:postgresql://{{ .Values.backend.config.postgresql.hostname }}:{{ .Values.backend.config.postgresql.port }}/{{ .Values.backend.config.postgresql.database }}{{ .Values.backend.config.postgresql.options }}"
        username: "{{ .Values.backend.config.postgresql.username }}"
        password: "{{ .Values.backend.config.postgresql.password }}"
    server:
      port: 8080
    management:
      server:
        port: 8081
      security:
        enabled: false
      endpoints:
        enabled-by-default: true
      endpoint:
        health:
          enabled: true
          probes:
            enabled: true
      health:
        livenessState:
          enabled: true
        readinessState:
          enabled: true
      tracing:
        enabled: true
      zipkin:
        tracing:
          endpoint: "{{ .Values.backend.config.zipkinEndpoint }}"
    fake-user:
      enabled: false

    hangar:
      dev: false
      base-url: "{{ .Values.base.host }}"

      announcements:
        -
          text: "{{ .Values.backend.config.announcement }}"
          color: "#ff544b"

      sso:
        auth-url: "{{ .Values.base.authHost }}"
        oauth-url: "{{ .Values.base.authHost }}/hydra"
        backend-oauth-url: "{{ .Values.backend.config.backendOauthUrl }}"
        client-id: "{{ .Values.base.sso.clientId }}"
        api-key: "{{ .Values.base.sso.apiKey }}"
        kratos-api-key: "{{ .Values.backend.config.kratosApiKey }}"

      security:
        api:
          url: "{{ .Values.backend.config.backendAuthHost }}"
          avatar-url: "{{ .Values.base.authHost }}/avatar/%s"
        token-secret: "{{ .Values.backend.config.tokenSecret }}"
        image-proxy-url: "{{ .Values.base.authHost }}/image/%s"

      storage:
        plugin-upload-dir: "/hangar/uploads"
        type: "{{ .Values.backend.config.storage.type }}"
        access-key: "{{ .Values.backend.config.storage.accessKey }}"
        secret-key: "{{ .Values.backend.config.storage.secretKey }}"
        bucket: "{{ .Values.backend.config.storage.bucket }}"
        object-storage-endpoint: "{{ .Values.backend.config.storage.objectStorageEndpoint }}"
        cdnEndpoint: "{{ .Values.backend.config.storage.cdnEndpoint }}"
        cdnIncludeBucket: "{{ .Values.backend.config.storage.cdnIncludeBucket }}"

    logging:
      level:
        root: INFO
        org.springframework: INFO
